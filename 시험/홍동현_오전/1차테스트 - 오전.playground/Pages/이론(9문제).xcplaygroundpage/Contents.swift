//: [Previous](@previous)
import UIKit

/***************************************************
 1. Array, Set, Dictionary 의 차이점에 대해 설명하고 예시 코드 작성
 ***************************************************/


"""
Array: 순서를 보장하며 중복을 허용한다.
Set: 순서를 보장하지않으며 중복을 허용하지 않는다.
Dictionary: key:value 쌍으로 이루어져있으며 순서를 보장하지 않고 key의 중복을 허용하지 않는다.
"""


/***************************************************
 2. Value Type, Reference Type 에 대한 예시와 그 차이점에 대해 설명
 ***************************************************/

"""
모름
"""

/***************************************************
 3. Application의 LifeCycle의 각 상태에 대해 설명
 ***************************************************/

"""
Not running : 실행되지 않았거나 시스템에 의해 종료된 상태
inactive : 실행중이지만 이벤트를 받지 않은 상태
active : 실질적으로 실행중인 상태
background : 백그라운드에서 동작중인 상태
suspended : 백그라운드에서 활동을 멈춘 상태 메모리에는 적재중인 상태
"""

/***************************************************
 4. ViewController LifeCycle의 각 상태에 대해 설명
 ***************************************************/

"""
loadview -> 메모리에 할당

viewDidLoad -> 초기화 작업, 메모리에서 해제될 때까지 한번만 수행

willappear -> 뷰가 나타날것이라고 알림

didappear -> 뷰가 나타났다고 알림

willdisappear -> 뷰가 사라질것이라고 알림

diddisappear -> 뷰가 사라졌다라고 알림

viewdidunload -> 메모리에서 해제됨
"""

/***************************************************
 5. 다음 4개의 키워드 (continue, break, return, fallthrough)가 쓰이는 위치와 역할에 대해 각각 설명
 ***************************************************/

"""
continue : 반복문에서 사용가능하다. 해당순회를 통과 시킨다.
continue : 반복문에서 사용가능하다. 해당순회를 중지 시킨다.
return : 반복문,함수등에서 사용가능하다. 리턴 후 빠져나온다.
fallthrough : 스위치문에서 사용이 가능하다. case는 암묵적으로 실행후 빠져나오지만 fallthrough를 만나면 밑에 있는 조건도 검사를 진행한다.
"""

/***************************************************
 6. Init 메서드가 필요한 경우와 그렇지 않은 경우의 차이점에 대해 설명
 ***************************************************/

"""
클래스 초기화시 attribute가 기본값이 아닌 값을 입력받을 때 사용한다.
attribute에 기본값이 있고 기본값을 사용한다면 init 메서드를 사용하지 않아도 무방하다.
"""

/***************************************************
 7. Access Level 을 각 단계별로 나열하고 그 차이점에 대해 설명
 ***************************************************/

"""
open: 모두에게 공개 오버라이딩 가능
public: 모두에게 공개 오버라이딩 불가
private: 외부에서 호출,접근 불가
"""

/***************************************************
 8. OOP 4대 특성에 대해 나열하고 각 특성에 대해 아는 만큼 설명 및 예시 코드 작성
 ***************************************************/

"""
캡슐화 : 연관이 있는것들을 모으는것
상속 : 다른 클래스의 속성을 물려 받는것
다형성 : 같은이름의 메서드를 다른동작을 하게끔 변경
추상화 : 노출이 될 필요가 없는 정보 또는 메서드는 숨기고 필요한것만 보여주게 만드는것 -> (private)
"""

class 상속상속 {
    func 상속() {
        print("부모의 상속 메서드")
    }
}

class OOP: 상속상속 {
    func 캡슐화() {
        print("OOP 클래스의 메서드들이 캡슐화")
    }
    
    override func 상속() {
        super.상속()
    }
    
    func 다형성(a: Int) {
        print("다형성 1번 \(a)")
    }
    
    func 다형성(a: Int, b: Int) {
        print("다형성 2번 \(a) \(b)")
    }
    
    private func 추상화() {
        print("private")
    }
    
}

let oop = OOP()
oop.상속()

/***************************************************
 9. Frame 과 Bounds가 무엇이고, 둘의 차이점은 어떤 것이 있는지 설명
 ***************************************************/

"""
Frame : 슈퍼뷰의 좌표계를 사용하여 element의 위치를 지정
Bounds : 자기 자신의 좌표계를 사용하여 element의 위치를 지정
"""


/***************************************************
 위 개념들은 아직 익숙치 않아서 답변하지 못한 분들이 많을 수 있지만
 중요한 내용들이니 답하지 못한 질문들은 체크해두었다가 천천히 공부하세요.
 ***************************************************/


//: [Next](@next)
