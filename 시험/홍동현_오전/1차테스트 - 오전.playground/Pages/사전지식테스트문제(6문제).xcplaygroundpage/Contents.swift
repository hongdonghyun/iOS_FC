//: [Previous](@previous)

/***************************************************
 "Hello, World!" 문자열을 출력하기 위한 코드 작성
 ***************************************************/

print("Hello World!")

/***************************************************
 2개의 정수를 입력 받아서 그 숫자들을 더한 뒤 결과를 정수로 반환하는 함수 작성
 ***************************************************/

func intSum(_ a: Int, _ b: Int) -> Int {
    return a + b
}

print(intSum(1,2))

/***************************************************
 2개의 정수를 입력 받아 그 숫자들을 곱한 뒤 결과값을 문자열로 반환하는 함수 작성
 ***************************************************/

func intMul(_ a: Int, _ b: Int) -> String {
    return String(a * b)
}

print(intMul(3,4))
print(type(of: intMul(3,4)))

/***************************************************
 주어진 숫자가 짝수인지 홀수인지 판단하는 함수 작성 (switch 문으로 해결)
 ***************************************************/

func oddEven(_ a: Int) -> String {
    switch a % 2 {
    case 0:
        return "짝"
    case 1:
        return "홀"
    default:
        return "Error"
    }
}

print(oddEven(3))

/***************************************************
 Swift 3가지 다른 반복문 방식별로 각각 1부터 10까지 값을 더한 결과를 출력하는 코드 작성
 ***************************************************/

var forResult = 0
for i in 1...10 {
    forResult += i
}
print(forResult)


var whileResult = 0
var innerVariable = 1
while true {
    whileResult += innerVariable
    innerVariable += 1
    if innerVariable == 11 {
        break
    }
}
print(whileResult)

var repeatWhileResult = 0
var i = 1
repeat {
    repeatWhileResult += i
    i += 1
} while i <= 10
print(repeatWhileResult)


/***************************************************
 Swift 에서 사용하는 네이밍 컨벤션의 종류를 나열하고 그것이 언제 사용되는지, 그리고 그 특징에 대해 설명
 ***************************************************/

"""
PascalCase : 클래스,파일명등에 사용 단어의 첫번째를 대문자로 사용
camelCase : PascalCase가 사용되지 않는 모든곳에 사용 -> 함수,변수 등
두번째 단어부터의 첫번째 글자를 대문자로 사용
"""



/***************************************************
 사전 지식 테스트 때 위 내용들을 제대로 푸신 분이 거의 없었는데
 지금은 대부분 많이 쉽죠?
 그만큼 많이 발전하셨습니다. :)
 ***************************************************/

//: [Next](@next)
